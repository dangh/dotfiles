" vim:fileencoding=utf-8:foldmethod=marker

source ~/.config/nvim/dangh.vim

"CROSS PLATFORM COMPATIBLE {{{

let can_map_super=has('gui_running')

"fix italic in terminal
"https://stackoverflow.com/a/53625973/1578964
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

"CROSS PLATFORM COMPATIBLE }}}

"VIMRC {{{
augroup auto_source_vimrc_on_save
	autocmd!
	autocmd BufWritePost .vim/vimrc source % | call LightlinePowerline()
	autocmd BufWritePost .vim/gvimrc source %
augroup END
noremap <silent> <expr> <F10>
			\	tabpagenr() < tabpagenr('$')
			\		? ':tablast<CR> :tabnew ~/.vim/gvimrc<CR> :160vsp $MYVIMRC<CR>'
			\		: ':tabnew ~/.vim/gvimrc<CR>:160vsp $MYVIMRC<CR>'
noremap! <silent> <expr> <F10>
			\	tabpagenr() < tabpagenr('$')
			\		? '<Esc> :tablast<CR> :tabnew ~/.vim/gvimrc<CR> :160vsp $MYVIMRC<CR>'
			\		: '<Esc> :tabnew ~/.vim/gvimrc<CR>:160vsp $MYVIMRC<CR>'
"VIMRC }}}

"PLUGIN TWEAKS {{{
"let g:loaded_getscriptPlugin=1
"let g:loaded_gzip=1
"let g:loaded_logiPat=1
let g:matchparen_timeout=20 | let g:matchparen_insert_timeout=20 "give up matching parenthesis if it took too long
let g:loaded_netrwPlugin=1
"let g:loaded_rrhelper=1
"let g:loaded_spellfile_plugin=1
"let g:loaded_tarPlugin=1
"let g:loaded_2html_plugin=1
"let g:loaded_vimballPlugin=1
"let g:loaded_zipPlugin=1
"PLUGIN TWEAKS }}}

"general config {{{

augroup enforce_zero_textwidth
	autocmd!
	"something keep overrides textwidth for vim language
	"force reset textwidth on buffer open
	autocmd BufReadPost,BufEnter,FocusGained,InsertLeave * set textwidth=0
augroup END

"}}} general config


if ENV('mvim')
	let g:last_cwd=expand('~/.vim/last_cwd')
	function! s:restore_cwd()
		if !argc() && filereadable(g:last_cwd)
			let l:cwd=readfile(g:last_cwd)[0]
			echomsg 'Restore working dir '.l:cwd
			execute 'cd '.l:cwd
		endif
	endfunction
	function! s:store_cwd()
		call writefile([getcwd()], g:last_cwd)
	endfunction
	augroup last_cwd
		autocmd!
		autocmd VimEnter * call s:restore_cwd()
		autocmd VimLeave * call s:store_cwd()
	augroup END
endif
Plug 'tpope/vim-obsession'
Plug 'dhruvasagar/vim-prosession'


let g:polyglot_disabled = ['javascript']
let g:vue_pre_processors = []
Plug 'sheerun/vim-polyglot'


Plug 'dangh/vim-javascript'
Plug 'tpope/vim-repeat'
Plug 'RRethy/vim-illuminate'
Plug 'tpope/vim-abolish'
Plug 'michaeljsmith/vim-indent-object'
Plug 'pbrisbin/vim-mkdir'


Plug 'tomtom/tcomment_vim'
call tcomment#type#Define('javascript', '//%s')
call tcomment#type#Define('vim', '"%s')
call tcomment#type#Define('yaml', '#%s')


"Plug 'mhinz/vim-signify'
set updatetime=100

if ENV('gui')
	let g:VM_maps={
				\'Find Under': '<D-d>',
				\'Find Subword Under': '<D-d>',
				\'Select All': '<C-D-g>',
				\}
endif
Plug 'mg979/vim-visual-multi'


let g:ctrlsf_auto_focus={'at': 'start'}
Plug 'dyng/ctrlsf.vim'
nnoremap <D-F> <Plug>CtrlSFPrompt
inoremap <D-F> <Esc><Plug>CtrlSFPrompt
vnoremap <D-F> <Plug>CtrlSFVwordExec


Plug 'hrsh7th/vim-vsnip'
imap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
smap <expr> <Tab>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<Tab>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'


Plug 'dense-analysis/ale'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
let g:lsp_diagnostics_enabled=0
let g:lsp_document_highlight_enabled=0
augroup lsp_config
	autocmd!
	autocmd User lsp_float_opened
				\ call popup_setoptions(lsp#ui#vim#output#getpreviewwinid(), {
				\ 	'borderchars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
				\ 	'padding': [0,1,0,1],
				\ 	'highlight': 'Constant',
				\ })
augroup END


highlight! link jsFuncCall Purple
highlight! link jsString GreenItalic
highlight! link jsBlock Blue
highlight! link jsFuncBlock Blue
highlight! link jsTryCatchBlock Blue
highlight! link jsSwitchBlock Blue
highlight! link jsIfElseBlock Blue
highlight! link jsRepeatBlock Blue


if executable('fd') && executable('fzy')
	let g:fzy={
				\'findcmd': 'fd -cnever --max-results=5000 -tf',
				\'lines': 20,
				\'popupwin': 1,
				\'term_highlight': 'Conceal',
				\'popup': {
					\	'highlight': 'Constant',
					\	'borderchars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
					\	'maxwidth': 120,
					\	'minwidth': 120,
					\	'maxheight': 20,
					\	'minheight': 20,
					\	},
					\}
	Plug 'bfrg/vim-fzy'
	noremap <D-P> :FzyOldfiles<CR>
	noremap <D-p> :FzyFind<CR>
	noremap <D-t> :FzyBuffer<CR>
	noremap <D-H> :FzyHelp<CR>
	noremap! <D-P> <Esc>:FzyOldfiles<CR>
	noremap! <D-p> <Esc>:FzyFind<CR>
	noremap! <D-t> <Esc>:FzyBuffer<CR>
	noremap! <D-H> <Esc>:FzyHelp<CR>
endif


Plug 'ctrlpvim/ctrlp.vim'
let g:ctrlp_match_window='order:ttb'
let g:ctrlp_use_caching=0
Plug 'dangh/ctrlp-funky'
let g:ctrlp_funky_matchtype='path'
let g:ctrlp_funky_syntax_highlight=1
let g:ctrlp_funky_after_jump = 'zozt'
let g:ctrlp_funky_nolim=1
noremap <D-r> :CtrlPFunky<CR>
nnoremap <F12> :execute 'CtrlPFunky ' . expand('<cword>')<Cr>


let g:fthook={}
function! g:fthook._(_)
	if &modifiable
		setlocal number relativenumber
		set signcolumn=no
	endif
endfunction
function! g:fthook.help(_)
	wincmd L
	vertical resize 80
	setlocal list listchars+=tab:\ \  "hide tabs but allow cursor moving to first col
endfunction
function! g:fthook.javascript(_)
	setlocal foldmethod=syntax foldnestmax=1 nofoldenable
	set cinoptions=:0 "put case statement on the same indent as switch
	set foldtext=getline(v:foldstart)
endfunction
function! g:fthook.vue(_)
	setlocal nofoldenable
endfunction
Plug 't9md/vim-fthook'


"GUI KEY MAPS {{{1

"Cmd+w delete buffer instead of quit, so we have an empty buffer when last file closed
noremap  <silent> <expr> <D-w> tabpagewinnr(0)==1 ?      ':bd<CR>' :      ':q<CR>'
noremap! <silent> <expr> <D-w> tabpagewinnr(0)==1 ? '<Esc>:bd<CR>' : '<Esc>:q<CR>'

"window navigation with Ctrl-[hjkl]
for c in ['h', 'j', 'k', 'l']
	execute 'noremap <C-'.c.'> <C-w>'.c
	execute 'noremap! <C-'.c.'> <Esc><C-w>'.c
endfor

"transpose characters
nnoremap <silent> <C-t>      xhPl
inoremap <silent> <C-t> <Esc>xpi

"prevent undo accident
nnoremap u <Nop>
vnoremap u <Nop>
nnoremap U      :undo<CR>
vnoremap U <Esc>:undo<CR>gv

"clear last search highlight
nnoremap <silent> <D-Esc>      :let @/=""<CR>
inoremap <silent> <D-Esc> <Esc>:let @/=""<CR>a
vnoremap <silent> <D-Esc>      :let @/=""<CR>gv

let macvim_hig_shift_movement=1

"Cmd+num to switch tab
for c in [1, 2, 3, 4, 5, 6, 7, 8, 9]
	execute 'noremap <D-'.c.'> '.c.'gt'
	execute 'noremap! <D-'.c.'> <Esc>'.c.'gt'
	execute 'noremap <Leader>'.c.' '.c.'gt'
endfor
noremap <D-0> :tablast<CR>
noremap! <D-0> <Esc>:tablast<CR>

"Cmd+Shift+D to duplicate line
nnoremap <silent> <D-D>      mx:copy .<CR>`xj
inoremap <silent> <D-D> <Esc>mx:copy .<CR>`xja
vnoremap <silent> <D-D>        :copy '<-1<CR>gv

"move line up-down with Alt+j/k
nnoremap <silent> <M-k>    mx:move .-2<CR>==`x
nnoremap <silent> <M-j>    mx:move .+1<CR>==`x
inoremap <silent> <M-k> <Esc>:move .-2<CR>==gi
inoremap <silent> <M-j> <Esc>:move .+1<CR>==gi
vnoremap <silent> <M-k>      :move '<-2<CR>gv=gv
vnoremap <silent> <M-j>      :move '>+1<CR>gv=gv

"open terminal at current file directory
noremap  <silent> <D-R>      :let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>cd $VIM_DIR<CR>
noremap! <silent> <D-R> <Esc>:let $VIM_DIR=expand('%:p:h')<CR>:terminal<CR>cd $VIM_DIR<CR>

"split pane
noremap  <D-_>       :new<CR>
noremap  <D-\|>      :vnew<CR>
noremap! <D-_>  <Esc>:new<CR>
noremap! <D-\|> <Esc>:vnew<CR>
noremap  <D-n>      :tabnew<CR>
noremap! <D-n> <Esc>:tabnew<CR>
if exists(':FzyFind')
	noremap  <D-_>       :new<CR>:FzyFind<CR>
	noremap  <D-\|>      :vnew<CR>:FzyFind<CR>
	noremap! <D-_>  <Esc>:new<CR>:FzyFind<CR>
	noremap! <D-\|> <Esc>:vnew<CR>:FzyFind<CR>
	noremap  <D-n>      :tabnew<CR>:FzyFind<CR>
	noremap! <D-n> <Esc>:tabnew<CR>:FzyFind<CR>
endif

"insert line above/below
noremap    <D-CR> o
noremap  <S-D-CR> O
noremap!   <D-CR> <Esc>o
noremap! <S-D-CR> <Esc>O

"}}}


"KEY MAPS {{{

"motion in wrapped line without breaking <vcount>
"https://stackoverflow.com/a/21000307/1578964
noremap <expr> j v:count ? 'j' : 'gj'
noremap <expr> k v:count ? 'k' : 'gk'
noremap <expr> $ v:count ? '$' : 'g$'
noremap <expr> ^ v:count ? '^' : 'g^'
noremap <expr> 0 v:count ? '0' : 'g0'

"make * # case-sensitive
"https://vi.stackexchange.com/a/4055
nnoremap <silent>  * :let @/='\C\<' . expand('<cword>') . '\>'<CR>:let v:searchforward=1<CR>n
nnoremap <silent>  # :let @/='\C\<' . expand('<cword>') . '\>'<CR>:let v:searchforward=0<CR>n
nnoremap <silent> g* :let @/='\C'   . expand('<cword>')       <CR>:let v:searchforward=1<CR>n
nnoremap <silent> g# :let @/='\C'   . expand('<cword>')       <CR>:let v:searchforward=0<CR>n

"move to first non-whitespace character on the previous line as oppose to <CR>
nnoremap <S-CR> -

"inspect syntax highlight group
function! SynGroup()
	let l:s = synID(line('.'), col('.'), 1)
	echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun
nnoremap <C-P> :call SynGroup()<CR>

"}}}
